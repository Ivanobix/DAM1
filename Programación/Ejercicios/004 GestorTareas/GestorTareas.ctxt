#BlueJ class context
comment0.target=GestorTareas
comment1.params=
comment1.target=GestorTareas()
comment1.text=\r\n\ 01.\ Constructor\ de\ la\ clase\r\n
comment10.params=
comment10.target=void\ imprimirListadoTareas()
comment10.text=\r\n\ 15.\ imrpimirListadoTareas\r\n\ Imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ imprime\r\n\ una\ l\u00EDnea\ en\ blanco.\ El\ m\u00E9todo\ no\ devuelve\ nada.\r\n
comment11.params=
comment11.target=java.lang.String\ getTareasEnUnaSolaLinea()
comment11.text=\r\n\ 16.\ getTareasEnUnaSolaLinea\r\n\ Devuelve\ todas\ las\ tareas\ pendientes\ en\ una\ sola\ linea\ separadas\r\n\ por\ comas,\ y\ por\ un\ espacio\ y\ con\ dos\ corcehete\ al\ inicio\ y\ al\ final\r\n\ del\ tipo\ "[tarea1,\ tarea2,\ tarea3].\ Si\ no\ hay\ tareas\ devuelve\ la\ \r\n\ cadena\ vacia.\ Es\ buena\ idea\ echar\ un\ vistazo\ a\ la\ API\ de\ la\ clase\ String\r\n
comment12.params=
comment12.target=void\ imprimirTareasEnUnaSolaLinea()
comment12.text=\r\n\ 17.\ imprimirTareasEnUnaSolaLinea\r\n\ Imrime\ todas\ las\ tareas\ pendientes\ en\ una\ sola\ linea\ separadas\r\n\ por\ comas,\ y\ por\ un\ espacio\ y\ con\ dos\ corcehete\ al\ inicio\ y\ al\ final\r\n\ del\ tipo\ "[tarea1,\ tarea2,\ tarea3].\ Si\ no\ hay\ tareas\ imprime\ una\ \r\n\ l\u00EDnea\ en\ blanco.\r\n
comment13.params=textoABuscar
comment13.target=boolean\ existeTareaConElTexto(java.lang.String)
comment13.text=\r\n\ 18.\ existeTareaConElTexto\r\n\ Devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\ contenga\ \r\n\ el\ texto\ indicado\ como\ parametro,\ false\ en\ caso\ contrario.\ \r\n\ Hay\ que\ hacerlo\ con\ bucle\ for-each.\r\n
comment14.params=
comment14.target=java.lang.String\ getTareasImportantes()
comment14.text=\r\n\ 19.\ getTareasImportantes\r\n\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\ (importante)\\n3.\ Estudiar\ (Importante)\\n")\ \r\n\ siempre\ que\ la\ tarea\ contenga\ la\ palabra\ "importante"\ \r\n\ (que\ puede\ aparecer\ en\ may\u00FAsculas\ o\ en\ min\u00FAsculas).\ \r\n\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ devuelve\ la\ cadena\ vac\u00EDa\r\n
comment15.params=
comment15.target=void\ imprimirTareasImportantes()
comment15.text=\r\n\ 20.\ imprimirTareasImportantes\r\n\ Imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\ (importante)\\n3.\ Estudiar\ (Importante)\\n")\ \r\n\ siempre\ que\ la\ tarea\ contenga\ la\ palabra\ "importante"\ \r\n\ (que\ puede\ aparecer\ en\ may\u00FAsculas\ o\ en\ min\u00FAsculas).\ \r\n\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ imprime\ una\ l\u00EDnea\ en\ blanco.\r\n
comment16.params=
comment16.target=java.lang.String\ getTareasImpares()
comment16.text=\r\n\ 21.\ getTareasImpares\r\n\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama\\n3.Estudiar\\n")\ siempre\ que\ la\ tarea\ ocupe\ una\ posici\u00F3n\r\n\ impar.\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ devuelve\ la\ cadena\ vac\u00EDa.\r\n
comment17.params=
comment17.target=void\ imprimirTareasImpares()
comment17.text=\r\n\ 22.\ imprimirTareasImpares\r\n\ Imprime\ por\ pantalla\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama")\ siempre\ que\ la\ tarea\ ocupe\ una\ posici\u00F3n\r\n\ impar.\ Si\ no\ hay\ tareas\ de\ ese\ tipo\ imprime\ una\ l\u00EDnea\ en\ blanco.\r\n
comment18.params=tarea
comment18.target=boolean\ eliminarTarea(int)
comment18.text=\r\n\ 23.\ eliminarTarea\r\n\ Elimina\ la\ tarea\ cuya\ numeraci\u00F3n\ obtenida\ al\ listar\ las\ tareas\ coincide\r\n\ con\ el\ parametro\ indicado.\ \r\n\ Devuelve\ true\ si\ la\ tarea\ existe\ y\ se\ elimina\ y\ false\ en\ caso\ contrario\r\n
comment19.params=texto
comment19.target=java.lang.String\ getPrimeraTareaConElTexto(java.lang.String)
comment19.text=\r\n\ 24.\ getPrimeraTareaConElTexto\r\n\ Devuelve\ un\ String\ conteniendo\ la\ primera\ tarea\ que\ contenga\ el\ texto\ \r\n\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\ coincidencia\ \r\n\ devuelve\ la\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\ for-each.\r\n
comment2.params=textoTarea
comment2.target=void\ agregarTarea(java.lang.String)
comment2.text=\r\n\ 09.\ Metodo\ que\ agrega\ una\ tarea\ al\ final\ de\ la\ lista\r\n
comment20.params=texto
comment20.target=void\ imprimePrimeraTareaConTexto(java.lang.String)
comment20.text=\r\n\ 25.\ imprimePrimeraTareaConTexto\r\n\ Imprime\ por\ pantalla\ la\ primera\ tarea\ que\ contenga\ el\ texto\ \r\n\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\ coincidencia\ \r\n\ imprime\ una\ l\u00EDnea\ en\ blanco.\ \r\n
comment21.params=
comment21.target=java.lang.String\ getListadoTareasWhile()
comment21.text=\r\n\ 26.\ getListadoTareasWhile\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\r\n\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\r\n\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\r\n\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\ while.\r\n
comment22.params=
comment22.target=void\ imprimirListadoTareasWhile()
comment22.text=\r\n\ 27.\ imprimirListadoTareasWhile\ Imprime\ por\ pantalla\ todas\ las\ tareas\r\n\ pendientes,\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\r\n\ punto\ y\ un\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\r\n\ imprime\ una\ l\u00EDnea\ en\ blanco.\ El\ m\u00E9todo\ no\ devuelve\ nada.\r\n
comment23.params=textoABuscar
comment23.target=java.lang.String\ getPrimeraTareaConElTextoWhile(java.lang.String)
comment23.text=\r\n\ 28.\ getPrimeraTareaConElTextoWhile\ Devuelve\ un\ String\ conteniendo\ la\ primera\ tarea\r\n\ que\ contenga\ el\ texto\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\r\n\ coincidencia\ devuelve\ la\ cadena\ vac\u00EDa.\ Hay\ que\ hacerlo\ con\ un\ bucle\ while.\r\n\ La\ coincidencia\ tiene\ que\ ser\ case-sensitive.\r\n
comment24.params=textoABuscar
comment24.target=void\ imprimePrimeraTareaConTextoWhile(java.lang.String)
comment24.text=\r\n\ 29.\ imprimePrimeraTareaConTextoWhile\ Imprime\ por\ pantalla\ la\ primera\ tarea\ que\r\n\ contenga\ el\ texto\ indicado\ como\ parametro.\ En\ caso\ de\ que\ no\ haya\ ninguna\r\n\ coincidencia\ imprime\ una\ l\u00EDnea\ en\ blanco.\ La\ coincidencia\ tiene\ que\ ser\r\n\ case-sensitive.\r\n
comment25.params=numeroTareas
comment25.target=java.lang.String\ getPrimerasTareas(int)
comment25.text=\r\n\ 30.\ getPrimerasTareas\ Devuelve\ un\ String\ oonteniendo\ las\ primeras\ n\ tareas\r\n\ (siendo\ n\ el\ parametro\ del\ metodo),\ una\ en\ cada\ linea\ con\ su\ n\u00FAmero\ delante.\r\n\ En\ caso\ de\ que\ no\ haya\ suficientes\ se\ devuelven\ solo\ las\ que\ haya.\ En\ caso\ de\r\n\ no\ haber\ tareas\ se\ devuelve\ la\ cadena\ vac\u00EDa.\r\n
comment26.params=numeroTareas
comment26.target=void\ imprimePrimerasTarea(int)
comment26.text=\r\n\ 31.\ imprimePrimerasTareas\ Imprime\ por\ pantalla\ las\ primeras\ n\ tareas\ (siendo\r\n\ n\ el\ parametro\ del\ metodo),\ una\ en\ cada\ linea\ con\ su\ n\u00FAmero\ delante.\ En\ caso\r\n\ de\ que\ no\ haya\ suficientes\ se\ imprimen\ solo\ las\ que\ haya.\ En\ caso\ de\ no\ haber\r\n\ tareas\ se\ imprime\ una\ linea\ en\ blanco.\ El\ metodo\ no\ devuelve\ nada\ y\ debe\ usar\r\n\ el\ m\u00E9todo\ anterior\r\n
comment27.params=textoABuscar
comment27.target=boolean\ hayTareaConElTextoEficiente(java.lang.String)
comment27.text=\r\n\ 32.\ hayTareaConElTextoEficiente\ Devuelve\ true\ si\ hay\ al\ menos\ una\ tarea\ que\r\n\ contenga\ el\ texto\ indicado\ como\ par\u00E1metro\ y\ false\ en\ caso\ contrario.\ El\r\n\ metodo\ se\ debe\ ejecutar\ de\ la\ forma\ mas\ rapida\ posible\r\n
comment28.params=textoABuscar
comment28.target=java.lang.String\ getTareasConElTexto(java.lang.String)
comment28.text=\r\n\ 33.\ getTareasConElTexto\ Devuelve\ un\ String\ conteniendo\ todas\ las\ tareas\ que\r\n\ contienen\ el\ texto\ indicado\ como\ parametro,\ una\ en\ cada\ linea\ (sin\ n\u00FAmero\r\n\ asociado).\ El\ String\ devuelto\ contiene\ una\ ultima\ linea\ adicional\ que\ indica\r\n\ el\ numero\ de\ tareas\ encontradas\ o\ el\ texto\ "No\ se\ encontraron\ coincidencias".\r\n\ La\ coincidencia\ tiene\ que\ ser\ case-sensitive.\r\n
comment29.params=textoABuscar
comment29.target=void\ imprimirTareasConElTexto(java.lang.String)
comment29.text=\r\n\ 34.\ imprimirTareasConElTexto\ Muestra\ por\ pantalla\ todas\ las\ tareas\ que\r\n\ contienen\ el\ texto\ indicado\ como\ parametro,\ una\ en\ cada\ linea.\ Se\ imprime\ una\r\n\ ultima\ linea\ adicional\ que\ indica\ el\ numero\ de\ tareas\ encontradas\ o\ el\ texto\r\n\ "No\ se\ encontraron\ coincidencias"\ si\ no\ hay\ ninguna\ que\ contenga\ el\ texto\r\n\ buscado\ imprime\ una\ linea\ en\ blanco.\ La\ coincidencia\ tiene\ que\ ser\r\n\ case-sensitive.\r\n
comment3.params=
comment3.target=java.lang.String\ devolverTareas()
comment3.text=\r\n\ 07.\ M\u00E9todo\ que\ devuelve\ un\ String\ con\ todas\ las\ tareas,\ una\r\n\ en\ cada\ l\u00EDnea.\ Si\ no\ hay\ tarea,\ esa\ l\u00EDnea\ contiene\ la\ cadena\r\n\ vac\u00EDa.\r\n
comment30.params=textoABuscar
comment30.target=boolean\ eliminaPrimeraTareaConElTexto(java.lang.String)
comment30.text=\r\n\ 35.\ eliminaPrimeraTareaConElTexto\ Elimina\ la\ primera\ tarea\ que\ contiene\ el\r\n\ texto\ indicado\ por\ par\u00E1metro.\ Devuelve\ true\ si\ se\ elimin\u00F3\ una\ tarea\ o\ false\r\n\ en\ caso\ contrario.\ Hay\ que\ hacerlo\ lo\ mas\ eficiente\ posible\r\n
comment31.params=textoABuscar
comment31.target=int\ eliminaTodasLasTareasConElTexto(java.lang.String)
comment31.text=\r\n\ 36.\ eliminaTodasLasTareasConElTexto\ Elimina\ todas\ las\ tareas\ \r\n\ que\ contienen\ un\ texto\ pasado\ como\ parametro.\ \r\n\ Devuelve\ el\ numero\ de\ tareas\ eliminadas.\ \r\n\ Hay\ que\ hacerlo\ con\ un\ bucle\ while.\r\n
comment32.params=numeroTarea\ textoAModificar
comment32.target=boolean\ editarTarea(int,\ java.lang.String)
comment32.text=\r\n\ 38.\ editarTarea\ Modifica\ el\ texto\ de\ la\ tarea\ indicada\ cuyo\ numero\ al\r\n\ listarla\ coincide\ con\ el\ pasado\ como\ primer\ parametro\ dejando\ el\ texto\r\n\ indicado\ en\ el\ segundo\ par\u00E1metro.\ Si\ la\ operaci\u00F3n\ tiene\ exito\ devuelve\r\n\ true;\ false\ en\ caso\ contrario.\r\n
comment33.params=
comment33.target=java.lang.String\ getListaTareasCompletadasYNoCompletadas()
comment33.text=\r\n\ 39.\ getListaTareasCompletadasYNoCompletadas\ Devuelve\ un\ String\ con\ todas\ las\r\n\ tareas\ una\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\r\n\ punto\ un\ espacio\ y,\ si\ estan\ completadas,\ un\ corchete,\ una\ x\ y\ otro\ corchete,\r\n\ y\ luego\ el\ texto\ de\ la\ tarea.\ Ejemplo\ de\ tarea\ terminada\ ser\u00EDa\ \r\n\ "1.\ [x]\ Hacer\ la\ cama".\ Ejemplo\ de\ tarea\ no\ terminada\ ser\u00EDa\ "1.\ Hacer\ la\ cama".\ \r\n\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vac\u00EDa.\ Se\ asume\ que\ las\ tareas\ cuando\ \r\n\ se\ insertan\ en\ el\ gestor\ no\ est\u00E1n\ completadas.\ No\ se\ pueden\ agregar\ nuevas\ \r\n\ clases\ al\ proyecto.\r\n
comment34.params=tareaCompleta
comment34.target=boolean\ marcarComoCompletada(int)
comment34.text=\r\n\ 40.\ marcarComoCompletada\ Marca\ como\ completada\ la\ tarea\ cuyo\ numero\ al\r\n\ listarla\ coincide\ con\ el\ pasado\ como\ parametro\ y\ devuelve\ true\ si\ pudo\r\n\ realizar\ la\ operacion\ o\ false\ en\ caso\ contrario\ (se\ entiende\ que\ una\ tarea\r\n\ que\ ya\ esta\ completada\ no\ se\ puede\ volver\ a\ marcar\ como\ completada)\r\n\ No\ se\ pueden\ agregar\ nuevas\ clases\ al\ proyecto.\ Tampoco\ se\ puede\ cambiar\r\n\ el\ texto\ de\ una\ tarea\ (el\ resto\ de\ m\u00E9todo\ anteriores\ deben\ seguir\r\n\ funcionando\ tal\ y\ como\ estan\ ahora\ mismo)\r\n
comment35.params=
comment35.target=java.lang.String\ getListaTareasConPrioridad()
comment35.text=\r\n\ 41.\ getListaTareasConPrioridad\ Devuelve\ todas\ las\ tareas,\ una\ en\ cada\ linea,\ \r\n\ indicando\ si\ esta\ pendiente\ con\ el\ texto\ "[\ ]"\ o\ si\ no\ esta\ pendiente\ con\ el\ \r\n\ texto\ "[x]"\ delante\ del\ texto\ de\ la\ tarea\ y\ luego\ un\ espacio\ \r\n\ (por\ ejemplo\ "1.\ [x]\ Hacer\ la\ cama");\ adem\u00E1s\ muestra\ la\ prioridad\ de\ la\ tarea\ \r\n\ al\ final\ de\ la\ linea\ separada\ por\ un\ espacio\ de\ la\ \r\n\ descripcion\ de\ la\ tarea;\ si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vacia.\ La\ prioridad\r\n\ de\ una\ tarea\ por\ defecto\ es\r\n
comment36.params=tareaACambiar\ prioridadACambiar
comment36.target=void\ setPrioridad(int,\ int)
comment36.text=\r\n\ 42.\ setPrioridad\ Metodo\ que\ fija\ la\ prioridad\ de\ la\ tarea\ que\ ocupa\ la\ posicion\ indicada\r\n\ como\ primer\ parametro\ al\ valor\ indicado\ en\ el\ segundo\ parametro.\ Las\ \r\n\ prioridades\ van\ de\ 1\ (muy\ importante)\ a\ 5\ (poco\ importante),\ La\ prioridad\ \r\n\ por\ defecto\ es\ 5.\ Si\ el\ valor\ que\ se\ indica\ como\ nueva\ prioridad\ es\ ilegal,\r\n\ la\ prioridad\ se\ queda\ como\ esta.\r\n
comment37.params=
comment37.target=java.lang.String\ getTareaMasPrioritaria()
comment37.text=\r\n\ 43.\ getTareaMasPrioritaria\ Devuelve\ todos\ los\ datos\ (posicion,\ completada\ o\ no,\ texto\ y\ prioridad)\ \r\n\ de\ la\ tarea\ con\ mayor\ prioridad.\ Si\ hay\ empate,\ devuelve\ la\ \u00FAltima\ encontrada.\ Si\ no\ hay\ tareas\ \r\n\ devuelve\ la\ cadena\ vacia\r\n
comment38.params=
comment38.target=java.lang.String\ getTareaMenosPrioritaria()
comment38.text=\r\n\ 44.\ getTareaMenosPrioritaria\ Devuelve\ todos\ los\ datos\ (posicion,\ completada\ o\ no,\ texto\ y\ prioridad)\ \r\n\ de\ la\ tarea\ con\ menor\ prioridad.\ Si\ hay\ empate,\ devuelve\ la\ \u00FAltima\ encontrada.\ Si\ no\ hay\ tareas\ \r\n\ devuelve\ la\ cadena\ vacia\r\n
comment39.params=
comment39.target=java.lang.String\ getTareasPorPrioridad()
comment39.text=\r\n\ 45.\ getTareasPorPrioridad\ Devuelve\ las\ descripciones\ de\ las\ tareas\ junto\ con\ su\ prioridad\ ordenadas\ por\ \r\n\ prioridad,\ una\ en\ cada\ linea.\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vac\u00EDa.\ En\ caso\ de\ que\ dos\ tareas\r\n\ tengan\ la\ misma\ prioridad\ debe\ aparecer\ antes\ la\ \u00FAtima\ a\u00F1adida.\r\n
comment4.params=
comment4.target=void\ imprimirTareas()
comment4.text=\r\n\ 08.\ M\u00E9todo\ imprimeTareas\ que\ imprime\ por\ pantalla\ las\ tareas\ pendientes\ \r\n\ basandonse\ en\ el\ m\u00E9todo\ anterior.\ No\ devuelve\ nada\r\n
comment40.params=
comment40.target=java.lang.String\ getTareasPorPrioridadSeleccion()
comment40.text=\r\n\ 46.\ getTareasPorPrioridadSeleccion\ Devuelve\ las\ descripciones\ de\ las\ tareas\ junto\ \r\n\ con\ su\ prioridad\ ordenadas\ por\ prioridad,\ una\ en\ cada\ linea.\ Si\ no\ hay\ tareas\ \r\n\ devuelve\ la\ cadena\ vac\u00EDa.\ En\ caso\ de\ que\ dos\ tareas\ tengan\ la\ misma\ prioridad\ debe\ \r\n\ aparecer\ antes\ la\ \u00FAtima\ a\u00F1adida\ de\ las\ dos.\ Es\ obligatorio\ que\ el\ algoritmo\ \r\n\ implementado\ sea\ el\ algoritmo\ de\ ordenaci\u00F3n\ por\ selecci\u00F3n.\r\n
comment41.params=posicionAModificar\ diaVencimiento\ mesVencimiento\ anoVencimiento
comment41.target=void\ fijarFechaTope(int,\ int,\ int,\ int)
comment41.text=\r\n\ 47.\ fijarFechaTope\ Fija\ una\ fecha\ limite\ para\ la\ tarea\ cuyo\ posicion\ \r\n\ nos\ indican.\ El\ ano\ se\ especifica\ con\ 4\ digitos\ (por\ ejemplo,\ 2019).indice\r\n\ Si\ la\ posicion\ indicada\ no\ es\ valida,\ el\ metodo\ no\ hace\ nada.\ El\ orden\r\n\ de\ los\ parametros\ es\ posicion\ de\ la\ tarea,\ dia,\ mes\ y\ ano.\r\n
comment42.params=
comment42.target=java.lang.String\ getListaTareasConFechaVencimiento()
comment42.text=\r\n\ 48.\ getListaTareasConFechaVencimiento\ Devuelve\ todas\ las\ tareas,\ una\ en\ cada\ linea,\ \r\n\ indicando\ su\ posicion\ y\ la\ fecha\ de\ vecimiento\ en\ formato\ DD/MM/YYYY.\ Por\ ejemplo,\ \r\n\ una\ tarea\ se\ mostraria\ "1.\ Hacer\ la\ cama\ -\ 21/01/2019";\ si\ no\ hay\ fecha\ de\ vencimiento\ la\ ultima\ \r\n\ parte\ no\ se\ muestra;\ si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vacia\r\n
comment43.params=dia\ mes\ ano
comment43.target=java.lang.String\ getTareasQueVencenEl(int,\ int,\ int)
comment43.text=\r\n\ 49.\ getTareasQueVencenEn\ Devuelve\ un\ String\ conteniendo\ todas\ las\ tareas\ que\ vencen\ en\ la\ fecha\ indicada\r\n\ como\ parametro\ (el\ orden\ de\ los\ parametros\ es\ dia,\ mes\ y\ a\u00F1o\ -este\ ultimo\ con\ 4\ d\u00EDgitos),\ una\ por\ linea\r\n\ (solo\ la\ descripcion\ de\ cada\ tarea).\ Si\ no\ hay\ tareas\ que\ venzan\ en\ dicha\ fecha\ devuelve\ la\ cadena\ vacia.\r\n
comment44.params=
comment44.target=java.lang.String\ getTareaVencimientoMasInminente()
comment44.text=\r\n\ 50.\ getTareaVencimientoMasInminente\ Devuelve\ la\ tarea\ con\ la\ fecha\ tope\ m\u00E1s\ inminente.\ Si\ hay\ empate,\r\n\ devuelve\ todas\ las\ empatadas,\ una\ en\ cada\ l\u00EDnea.\ Si\ no\ hay\ ninguna\ con\ fecha\ tope\ m\u00E1s\ inminente\ devuelve\ \r\n\ la\ cadena\ vacia.\ Evidentemente\ no\ tendremos\ en\ cuenta\ tareas\ con\ fecha\ tope\ ya\ pasada.\r\n
comment45.params=
comment45.target=java.lang.String\ getTareaVencimientoMasLejano()
comment45.text=\r\n\ 51.\ getTareaVencimientoMasLejano\ Devuelve\ la\ tarea\ con\ la\ fecha\ tope\ m\u00E1s\ \r\n\ lejana.\ Si\ hay\ empate,\ devuelve\ todas\ la\ s\ empatadas,\ una\ en\ cada\ linea.\r\n\ Si\ no\ hay\ ninguna\ con\ fecha\ tope\ devuelve\ la\ cadena\ vacia.\ \r\n\ Evidentemente\ no\ tendremos\ en\ cuenta\ tareas\ con\ fecha\ tope\ ya\ pasada.\r\n
comment46.params=
comment46.target=java.lang.String\ getTareasVencidas()
comment46.text=\r\n\ 52.\ getTareasVencidas\ Devuelve\ un\ String\ conteniendo\ todas\ las\ tareas\ que\ \r\n\ han\ vencido\ ya,\ una\ por\ linea,\ junto\ con\ su\ numero\ de\ tarea.\ Si\ no\ hay\ \r\n\ tareas\ que\ cumplan\ la\ condicion\ devuelve\ la\ cadena\ vacia\r\n
comment47.params=
comment47.target=java.lang.String\ getTareasPorFechaVencimiento()
comment47.text=\r\n\ 53.\ getTareasPorFechaVencimiento\ Metodo\ que\ devuelve\ un\ String\ coneniendo\ \r\n\ las\ tareas\ con\ fecha\ de\ vencimiento\ a\ partir\ de\ hoy\ (inlcuido)\ ordenadas\ por\ \r\n\ fecha\ de\ vencimiento\ (las\ mas\ proximas\ primero).\ Si\ no\ hay\ tareas\ devuelve\ \r\n\ la\ cadena\ vacia.\ Si\ hay\ empate\ devuelve\ primero\ la\ que\ se\ agregara\ antes\ \r\n\ en\ el\ gestor\ de\ tareas\r\n
comment48.params=
comment48.target=java.lang.String\ getListadoTareasConIterador()
comment48.text=\r\n\ 54.\ getListadoTareasConIterador\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\r\n\ en\ cada\ l\u00EDnea,\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\r\n\ espacio\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\r\n\ cadena\ vac\u00EDa.\ Es\ obligatorio\ utilizar\ un\ bucle\ while\ basado\ en\ un\ iterador\r\n
comment49.params=
comment49.target=java.lang.String\ getListaTareasConPrioridadIterador()
comment49.text=\r\n\ 55.\ getListaTareasConPrioridadIterador\ Devuelve\ todas\ las\ tareas,\ una\ en\ cada\ linea,\ \r\n\ indicando\ adem\u00E1s\ la\ prioridad\ de\ la\ tarea\ \ al\ final\ de\ la\ linea\ separada\ por\ un\ espacio\ de\ la\ \r\n\ descripcion\ de\ la\ tarea;\ si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vacia.\ Es\ obligatorio\ hacerlo\ \r\n\ con\ un\ bucle\ while\ basado\ en\ un\ iterador\r\n
comment5.params=
comment5.target=int\ getNumeroTareas()
comment5.text=\r\n\ 10.\ Metodo\ getNumeroTareas\ que\ devuelve\ el\ numero\ de\ tareas\ pendientes\r\n\ actuales\ y\ no\ requiere\ par\u00E1metros\ \r\n
comment50.params=
comment50.target=boolean\ olvidaTareasYaPasadas()
comment50.text=\r\n\ 56.\ olvidaTareasYaPasadas\ Elimina\ todas\ las\ tareas\ con\ fecha\ limite\ previa\ a\ la\ fecha\ actual.\r\n\ Devuelve\ true\ si\ realiz\u00F3\ alguna\ eliminaci\u00F3n,\ false\ en\ caso\ contrario\r\n
comment51.params=
comment51.target=boolean\ hayTareasDuplicadas()
comment51.text=\r\n\ 57.\ Metodo\ que\ devuelve\ true\ si\ hay\ tareas\ duplicadas\ (dos\ tareas\ al\ menos\ con\ la\ \r\n\ misma\ descripcion)\ o\ false\ en\ caso\ contrario\r\n
comment52.params=
comment52.target=boolean\ eliminaTareaMasVieja()
comment52.text=\r\n\ 58.\ eliminaTareaMasVieja\ Elimina\ la\ tarea\ mas\ antigua.\ Si\ no\ hay\ tareas\ devuelve\ false,\r\n\ true\ en\ caso\ contrario\r\n
comment6.params=
comment6.target=int\ getNumeroTareas2()
comment6.text=\r\n\ 10.1.\ Metodo\ getNumeroTareas2\ que\ devuelve\ el\ numero\ de\ tareas\ pendientes\r\n\ actuales\ y\ no\ requiere\ par\u00E1metros.\ No\ se\ puede\ usar\ el\ metodo\ size\r\n
comment7.params=
comment7.target=java.lang.String\ getTareaMasAntigua()
comment7.text=\r\n\ 12.\ getTareaMasAntigua\r\n\ Devuelve\ la\ primera\ tarea\ que\ se\ agrego\ al\ gestor\ de\ tareas;\ si\ no\ \r\n\ hay\ tareas\ devuelve\ la\ cadena\ vacia;\r\n
comment8.params=
comment8.target=void\ imprimirTareaMasAntigua()
comment8.text=\r\n\ 13.\ imprimirTareaMasAntigua\r\n\ Imprime\ la\ primera\ tarea\ que\ se\ agrego\ al\ gestor\ de\ tareas;\ si\ no\ \r\n\ hay\ tareas\ imprime\ una\ l\u00EDnea\ en\ blanco;\r\n
comment9.params=
comment9.target=java.lang.String\ getListadoTareas()
comment9.text=\r\n\ 14.\ getListadoTareas\r\n\ Devuelve\ un\ String\ con\ todas\ las\ tareas\ pendientes,\ una\ en\ cada\ l\u00EDnea,\r\n\ precedidas\ de\ su\ posicion\ (empezando\ en\ 1),\ un\ punto\ y\ un\ espacio\ \r\n\ (por\ ejemplo\:\ "1.\ Hacer\ la\ cama").\ Si\ no\ hay\ tareas\ devuelve\ la\ cadena\ vac\u00EDa\r\n
numComments=53
